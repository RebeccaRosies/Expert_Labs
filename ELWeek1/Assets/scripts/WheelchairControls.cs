//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/scripts/WheelchairControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WheelchairControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WheelchairControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WheelchairControls"",
    ""maps"": [
        {
            ""name"": ""LeftSliderInput"",
            ""id"": ""a113c556-9973-446e-b5af-258f8027fd9e"",
            ""actions"": [
                {
                    ""name"": ""LeftWheelPush"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8f1034f9-92c9-4425-b3af-e59b9001fab7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a29b492a-4333-473a-8c09-a8c60c1f65a1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftWheelPush"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5912ecbf-d977-4786-b322-b13d0ad40058"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftWheelPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e21a3a85-32c1-4d3c-9f79-0340635bab60"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftWheelPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RightSliderInput"",
            ""id"": ""54b43a6e-e0cb-435d-b508-67bced3a9dc9"",
            ""actions"": [
                {
                    ""name"": ""RightWheelPush"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1d3df67d-0307-4375-8ab7-8d74ccca51b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e8b7405a-fd93-4193-9d39-f8eaa2c3f811"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightWheelPush"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b40dd964-5be9-4e94-8e0a-f5ca3318199a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightWheelPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""05766a1e-209f-4fc9-a107-0bc7fb6c5428"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightWheelPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftSliderInput
        m_LeftSliderInput = asset.FindActionMap("LeftSliderInput", throwIfNotFound: true);
        m_LeftSliderInput_LeftWheelPush = m_LeftSliderInput.FindAction("LeftWheelPush", throwIfNotFound: true);
        // RightSliderInput
        m_RightSliderInput = asset.FindActionMap("RightSliderInput", throwIfNotFound: true);
        m_RightSliderInput_RightWheelPush = m_RightSliderInput.FindAction("RightWheelPush", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftSliderInput
    private readonly InputActionMap m_LeftSliderInput;
    private ILeftSliderInputActions m_LeftSliderInputActionsCallbackInterface;
    private readonly InputAction m_LeftSliderInput_LeftWheelPush;
    public struct LeftSliderInputActions
    {
        private @WheelchairControls m_Wrapper;
        public LeftSliderInputActions(@WheelchairControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftWheelPush => m_Wrapper.m_LeftSliderInput_LeftWheelPush;
        public InputActionMap Get() { return m_Wrapper.m_LeftSliderInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftSliderInputActions set) { return set.Get(); }
        public void SetCallbacks(ILeftSliderInputActions instance)
        {
            if (m_Wrapper.m_LeftSliderInputActionsCallbackInterface != null)
            {
                @LeftWheelPush.started -= m_Wrapper.m_LeftSliderInputActionsCallbackInterface.OnLeftWheelPush;
                @LeftWheelPush.performed -= m_Wrapper.m_LeftSliderInputActionsCallbackInterface.OnLeftWheelPush;
                @LeftWheelPush.canceled -= m_Wrapper.m_LeftSliderInputActionsCallbackInterface.OnLeftWheelPush;
            }
            m_Wrapper.m_LeftSliderInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftWheelPush.started += instance.OnLeftWheelPush;
                @LeftWheelPush.performed += instance.OnLeftWheelPush;
                @LeftWheelPush.canceled += instance.OnLeftWheelPush;
            }
        }
    }
    public LeftSliderInputActions @LeftSliderInput => new LeftSliderInputActions(this);

    // RightSliderInput
    private readonly InputActionMap m_RightSliderInput;
    private IRightSliderInputActions m_RightSliderInputActionsCallbackInterface;
    private readonly InputAction m_RightSliderInput_RightWheelPush;
    public struct RightSliderInputActions
    {
        private @WheelchairControls m_Wrapper;
        public RightSliderInputActions(@WheelchairControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightWheelPush => m_Wrapper.m_RightSliderInput_RightWheelPush;
        public InputActionMap Get() { return m_Wrapper.m_RightSliderInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightSliderInputActions set) { return set.Get(); }
        public void SetCallbacks(IRightSliderInputActions instance)
        {
            if (m_Wrapper.m_RightSliderInputActionsCallbackInterface != null)
            {
                @RightWheelPush.started -= m_Wrapper.m_RightSliderInputActionsCallbackInterface.OnRightWheelPush;
                @RightWheelPush.performed -= m_Wrapper.m_RightSliderInputActionsCallbackInterface.OnRightWheelPush;
                @RightWheelPush.canceled -= m_Wrapper.m_RightSliderInputActionsCallbackInterface.OnRightWheelPush;
            }
            m_Wrapper.m_RightSliderInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightWheelPush.started += instance.OnRightWheelPush;
                @RightWheelPush.performed += instance.OnRightWheelPush;
                @RightWheelPush.canceled += instance.OnRightWheelPush;
            }
        }
    }
    public RightSliderInputActions @RightSliderInput => new RightSliderInputActions(this);
    public interface ILeftSliderInputActions
    {
        void OnLeftWheelPush(InputAction.CallbackContext context);
    }
    public interface IRightSliderInputActions
    {
        void OnRightWheelPush(InputAction.CallbackContext context);
    }
}
